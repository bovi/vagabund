#!/usr/bin/env ruby

require_relative '../lib/susi.rb'

env = if File.exists? ENV_FILE
  JSON.parse(File.read(ENV_FILE))
else
  {"guests" => []}
end

case ARGV[0]
when 'up', 'start'
  env['guests'].each do |guest|
    guest[:vnc_id] = 11
    guest[:qmp_port] = 24444
    guest[:port_forward] = []
    guest[:port_forward] << {host: 20022, guest: 22}
    vm = Qemu.new(**guest.transform_keys(&:to_sym))
    puts vm.cmd if ARGV[1] == 'verbose'
    vm.start
    sleep 1
    Qemu.change_vnc_password(DEFAULT_PASSWORD)
  end
when 'down', 'shutdown', 'off'
  Qemu.shutdown
when 'quit'
  Qemu.quit
when 'install'
  arch = if ARGV[3] == 'arm64'
    :arm64
  elsif ARGV[4] == 'x86'
    :x86
  else
    nil
  end
  vm = Qemu.new(iso: ARGV[1], arch: arch, base: true, vnc_id: 11, qmp_port: 24444)
  puts vm.cmd if ARGV[2] == 'verbose'
  vm.start
  sleep 1
  Qemu.change_vnc_password(DEFAULT_PASSWORD)
when 'create'
  Qemu.create_disk(ARGV[1], ARGV[2])
when 'ssh'
  `open ssh://#{DEFAULT_USER}@localhost:20022`
when 'vnc'
  Qemu.change_vnc_password(DEFAULT_PASSWORD)
  `open vnc://#{DEFAULT_USER}:#{DEFAULT_PASSWORD}@localhost:5911`
when 'status'
  puts "VM Guest status: #{Qemu.status}"
when 'usb'
  env_data = JSON.parse(File.open(ENV_FILE).read)
  guest_name = env_data['guests'].first['name']
  puts "Adding a USB device to the '#{guest_name}' VM"
  puts
  puts "Please ensure that the USB device(s) you want to add are not connected"
  puts "...press ENTER to continue"
  STDIN.gets("\n")
  puts "Scanning..."
  puts
  scan_1 = usb
  puts "Please insert the USB device(s) you want to add"
  puts "...press ENTER to continue"
  STDIN.gets("\n")
  puts "Scanning..."
  puts
  scan_2 = usb

  # identify the new USB devices
  new_devices = (scan_2 - scan_1)
  # add the new USB devices to the VM configuration file
  new_devices.each do |dev|
    n = dev[:name]
    v = dev[:vendor_name]
    puts "Adding '#{n}' from '#{v}' to the '#{guest_name}' VM"
    puts "...press ENTER to permanent add it to your configuration (CTRL-C to cancel)"
    STDIN.gets("\n")

    # TODO: currently we assume just one machine, probably we should offer selection
    env_data['guests'].first['usb'] = [] if env_data['guests'].first['usb'].nil?
    env_data['guests'].first['usb'] << {
      name: n.gsub(/[^a-zA-Z0-9]/, ''),
      vendor: dev[:vendor_id],
      product: dev[:product_id]
    }
  end
  File.open(ENV_FILE, 'w+').puts(env_data.to_json)
when 'init', 'new'
  if File.exist? ENV_FILE
    puts 'Already initialized'
  else
    File.open(ENV_FILE, 'w+') do |f|
      init_data = { guests: [{name: 'Test Machine'}] }.to_json
      f.puts init_data
    end
    puts "Created #{ENV_FILE}" 
  end
else
  puts <<HELP
susi - QEMU-based VM manager for macOS

Usage:

  # show this help message
  susi

  # create a QCOW2 disk (e.g. file.qcow2 with 20GB)
  susi create file.qcow2 20

  # stop VM in current directory
  susi down

  # initialize VM environment
  susi init

  # install a new machine
  susi install ubuntu.iso x86

  # start SSH session for the current VM
  susi ssh

  # start VM in current directory
  susi up

  # wizard to add USB devices to the VM configuration
  susi usb

  # start VNC session for the current VM
  susi vnc

Contact:

  by Daniel Bovensiepen (oss [at] bovi [point] li)
  at https://github.com/bovi/susi
HELP
end
